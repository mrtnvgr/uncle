#!/bin/python3
import argparse, os
from math import floor

class main:
    def __init__(self):
        self.version = "0.1.6"
        self.rems = {}
        self.tracks = {}
        self.sourceFile = False
        self.runtime()
        
    def runtime(self):
        self.parseArgs()
        self.checkArgs()
        self.cueParse()
        if self.args.tags or self.args.tags_index:
            self.tagList()
        elif self.args.list:
            self.trackList()
        else:
            if "flac" not in self.getFileFormat(self.rems["FILE"]):
                self.convertFile()
            self.splitFlac()
        self.cleanup()


    def parseArgs(self):
        parser = argparse.ArgumentParser()
        parser.add_argument("-c", "--cue")
        parser.add_argument("-p", "--path", default="")
        parser.add_argument("-t", "--track", help="track index to extract", action="append", type=int)
        parser.add_argument("-tf", "--title-format", help="track title format", default="{TITLE}")
        parser.add_argument("-m", "--message", help="replace 'COMMENT' tag")
        parser.add_argument("-tg", "--tag", help="replace any tag(s)\nExample: 'TAG1:Text1|TAG2:Text2'", type=lambda x: {k:v for k,v in (i.split(':') for i in x.split('|'))})
        parser.add_argument("-rtg", "--remove-tag", help="remove tag from tracks", action="append")
        parser.add_argument("-tgi", "--tags-index", help="track index to print tag list", action="append", type=int)
        parser.add_argument("-tgs", "--tags", help="tags from cue", action="store_true")
        parser.add_argument("-l", "--list", help="tracks from cue", action="store_true")
        parser.add_argument("-r", "--remove", help="remove source file", action="store_true")
        parser.add_argument("-rc", "--remove-cue", help="remove source cue file", action="store_true")
        parser.add_argument("-d", "--dry", help="only print commands", action="store_true")
        parser.add_argument("-v", "--version", action="store_true")
        self.args = parser.parse_args()

    def checkArgs(self):
        if self.args.version==True:
            print(f"uncle v{self.version}")
            exit(0)
        elif self.args.cue==None:
            print("error: the following arguments are required: -c/--cue")
            exit(1)
        else:
            self.cueCheck()

    def cueCheck(self):
        self.cue = open(self.args.cue).read().split("\n")
        exists = os.path.exists(os.path.join(os.getcwd(), self.args.path))
        if self.args.path!="" and not exists:
            print("error: path not found")
            exit(1)

    def cueParse(self):
        currenttrack = 0
        for line in self.cue:
            cueline = [x for x in line.split(" ") if x!=""]
            if cueline!=[]:
                if "REM" in cueline[0]:
                    if cueline[1]=="COMMENT" and self.args.message!=None:
                        self.rems['COMMENT'] = self.args.message
                    else:
                        self.rems[cueline[1]] = " ".join(cueline[2:])
                elif cueline[0]=="FILE":
                    self.rems[cueline[0]] = " ".join(" ".join(cueline[1:]).split(" ")[:-1])
                elif cueline[0]=="PERFORMER" or cueline[0]=="TITLE" or cueline[0]=="FLAGS":
                    if currenttrack!=0:
                        self.tracks[currenttrack][cueline[0]] = " ".join(cueline[1:])
                    else:
                        self.rems[cueline[0]] = " ".join(cueline[1:])
                elif cueline[0]=="TRACK":
                    currenttrack = cueline[1]
                    self.tracks[currenttrack] = {}
                elif cueline[0]=="INDEX":
                    if not "INDEX" in self.tracks[currenttrack].keys():
                        self.tracks[currenttrack]["INDEX"] = cueline[2]
                else:
                    print("UNSUPPORTED: " + cueline[0])
        self.tracks = list(self.tracks.values())
    
    def tagList(self):
        for i in range(len(self.tracks)):
            if self.args.tags_index:
                if not i+1 in self.args.tags_index: continue
            track = self.rems|self.tracks[i]
            if self.args.tag: track = track|self.args.tag
            if self.args.remove_tag:
                for tag in self.args.remove_tag:
                    if tag in track: track.pop(tag)
            print()
            print(f"[TAG LIST] -> [{i+1}]")
            for i in track: print(f"{i}: {track[i]}")
        print()
        exit(0)

    def trackList(self):
        for i in range(len(self.tracks)):
            track = self.tracks[i]
            if self.args.track!=None:
                if i+1 not in self.args.track:
                    continue
            if self.args.list:
                print(f"[TRACK LIST] -> {track['TITLE']} ({i+1})")
        exit(0)

    def convertFile(self):
        self.sourceFile = self.rems['FILE']
        converted = self.sourceFile.rstrip('\"').split(".")[0]
        if "ape" in self.getFileFormat(self.rems['FILE']):
            os.system(f"mac {self.rems['FILE']} auto -d")
            os.system(f'flac --totally-silent --delete-input-file --best {converted}.wav" -o {converted}.flac"')
        elif "m4a" in self.getFileFormat(self.rems['FILE']):
            os.system(f'ffmpeg -i {self.rems["FILE"]} {converted}.flac"')
        elif "wav" in self.getFileFormat(self.rems['FILE']):
            os.system(f'flac --totally-silent --delete-input-file --best {converted}.wav" -o {converted}.flac"')
        self.rems['FILE'] = converted+'.flac"'
    
    def splitFlac(self):
        for i in range(len(self.tracks)):
            track = self.tracks[i]
            if self.args.track!=None:
                if i+1 not in self.args.track:
                    continue
            if len(self.tracks)>i+1:
                nexttime = " --until="+self.formatTime(self.tracks[i+1]['INDEX'])
            else:
                nexttime = ""
            title = track['TITLE'].rstrip('\"') + f'.{self.getFileFormat(self.rems["FILE"])}'
            if title.startswith('"') and not title.endswith('"'): title = title+'"'
            title = self.parseTitleFormat(track, i+1, self.getFileFormat(title))
            time = self.formatTime(track['INDEX'])

            metadata = self.getMetadata(track)
            
            execlines = [f"flac --totally-silent --best -f -c {self.rems['FILE']} --skip={time}{nexttime} -o {self.args.path}{title}"]
            execlines.append(f"metaflac --no-utf8-convert --remove-all-tags {' '.join(metadata)} {self.args.path}{title}")
            
            if self.args.dry:
                print("\n".join(execlines))
            else:
                for execline in execlines:
                    os.system(execline)
                print(f"[SPLIT] {self.rems['FILE']} -> {self.args.path}{title} ({i+1}/{len(self.tracks)})")
    
    def getMetadata(self, track):
        metadata = []
        trackdata = self.rems|track
        if self.args.tag: trackdata = trackdata|self.args.tag
        if self.args.remove_tag:
            for tag in self.args.remove_tag:
                if tag in trackdata: trackdata.pop(tag)
        for rem in trackdata:
            if trackdata[rem][0]!='"': trackdata[rem] = f'"{trackdata[rem]}"'
            metadata.append(f'--set-tag={rem}={trackdata[rem]}')
        return metadata

    def cleanup(self):
        if self.args.remove or self.sourceFile!=False:
            try:
                if self.sourceFile!=False: os.remove(self.sourceFile.replace('"', ''))
                os.remove(self.rems['FILE'].replace('"',''))
                if self.args.remove_cue: os.remove(self.args.cue)
            except Exception as e:
                print(f"error: {e}")

    def parseTitleFormat(self, track, index, format):
        format = format.removesuffix('"')
        titleformat = self.args.title_format
        formats = {"{TITLE}": track.get("TITLE", ""),
                   "{INDEX}": self.formatIndex(index),
                   "{PERFORMER}": track.get("PERFORMER", "")}
        for i in formats:
            titleformat = titleformat.replace(i, self.removeQuotes(formats[i]))
        return f'"{titleformat}".{format}'

    @staticmethod
    def removeQuotes(text):
        return text.removeprefix('"').removesuffix('"')
    
    @staticmethod
    def formatTime(time):
        minutes,seconds,ticks = time.split(":")
        return f"{minutes}:{seconds}.{ticks}"

    @staticmethod
    def getFileFormat(file):
        return file.split(".")[-1]

    @staticmethod
    def formatIndex(index, max=2):
        ret = str(floor(index))
        return "0" * (max - len(ret)) + ret

if __name__=="__main__":
    main()
